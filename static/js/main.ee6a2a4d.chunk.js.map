{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","constants.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","reducers.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["Card","id","name","email","className","alt","src","srcSet","width","height","CardList","robots","console","log","map","user","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","children","style","overflow","border","ErrorBoundry","state","hasError","error","info","this","setState","props","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","CounterButton","updateCount","count","nextProps","nextState","color","onClick","PureComponent","Header","App","useSelector","searchField","searchRobots","requestRobots","isPending","dispatch","useDispatch","useEffect","fetch","then","response","json","data","payload","catch","filteredRobots","filter","robot","toLowerCase","includes","event","text","target","value","initialStateSearch","initialStateRobots","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.ee6a2a4d.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ id, name, email }) => {\n  return (\n    <div key={id} className=\"bg-light-green dib br3 pa3 ma2 grow shadow-5\">\n      <img\n        alt=\"robots\"\n        src={`https://res.cloudinary.com/luizalvino/image/upload/h_200,w_200/robohash/${id}.webp`}\n        srcSet={`https://res.cloudinary.com/luizalvino/image/upload/h_200,w_200/robohash/${id}.webp 200w, https://res.cloudinary.com/luizalvino/image/upload/h_400,w_400/robohash/${id}.webp 1080w`}\n        width=\"200\"\n        height=\"200\"\n      />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  console.log(\"CardList\");\n  return (\n    <div>\n      {robots.map((user) => {\n        return (\n          <Card\n            key={user.id}\n            id={user.id}\n            name={user.name}\n            email={user.email}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","const SearchBox = ({ searchfield, searchChange }) => {\n  console.log(\"SearchBox\");\n  return (\n    <div className=\"pa2\">\n      <input\n        aria-label=\"Search Robots\"\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","const Scroll = ({ children }) => {\n  return (\n    <div\n      style={{\n        overflow: \"scroll\",\n        border: \"1px solid black\",\n        height: \"800px\",\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundry extends Component {\n  constructor() {\n    super();\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oooops. That is not good</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, { PureComponent } from \"react\";\n\nclass CounterButton extends PureComponent {\n  constructor() {\n    super();\n    this.state = {\n      count: 0,\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.count !== nextState.count) {\n      return true;\n    }\n    return false;\n  }\n\n  updateCount = () => {\n    this.setState((state) => ({\n      count: state.count + 1,\n    }));\n  };\n\n  render() {\n    console.log(\"CounterButton\");\n    return (\n      <button color={this.props.color} onClick={this.updateCount}>\n        Count: {this.state.count}\n      </button>\n    );\n  }\n}\n\nexport default CounterButton;\n","import React, { Component } from \"react\";\nimport CounterButton from \"./CounterButton\";\n\nclass Header extends Component {\n  // shouldComponentUpdate(nextProps, nextState) {\n  //   return false;\n  // }\n\n  render() {\n    console.log(\"Header\");\n    return (\n      <div>\n        <h1 className=\"f1\">RoboFriends</h1>\n        <CounterButton color={\"red\"} />\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundry from \"../components/ErrorBoundry\";\nimport \"./App.css\";\n\nimport { setSearchField, requestRobots } from \"../actions\";\nimport Header from \"../components/Header\";\n\nconst App = () => {\n  const { searchField, robots, isPending, error } = useSelector((state) => {\n    return {\n      searchField: state.searchRobots.searchField,\n      robots: state.requestRobots.robots,\n      isPending: state.requestRobots.isPending,\n      error: state.requestRobots.error,\n    };\n  });\n  const dispatch = useDispatch();\n  const onSearchChange = (event) =>\n    dispatch(setSearchField(event.target.value));\n\n  useEffect(() => {\n    dispatch(requestRobots());\n  }, [dispatch]);\n\n  const filteredRobots = robots.filter((robot) => {\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\n  });\n\n  return isPending ? (\n    <h1>Loading...</h1>\n  ) : (\n    <div className=\"tc\">\n      <Header />\n      <SearchBox searchChange={onSearchChange} />\n      <Scroll>\n        <ErrorBoundry>\n          <CardList robots={filteredRobots} />\n        </ErrorBoundry>\n      </Scroll>\n    </div>\n  );\n};\n\nexport default App;\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING});\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n      .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\n};\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nconst initialStateSearch = {\n  searchField: \"\",\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: \"\",\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false,\n      });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false,\n      });\n    default:\n      return state;\n  }\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport \"tachyons\";\nimport App from \"./containers/App\";\nimport \"./index.css\";\nimport { searchRobots, requestRobots } from \"./reducers\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorkerRegistration.register();\n\nreportWebVitals();\n"],"sourceRoot":""}